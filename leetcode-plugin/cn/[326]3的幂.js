//给定一个整数，写一个函数来判断它是否是 3 的幂次方。
//
// 示例 1:
//
// 输入: 27
//输出: true
//
//
// 示例 2:
//
// 输入: 0
//输出: false
//
// 示例 3:
//
// 输入: 9
//输出: true
//
// 示例 4:
//
// 输入: 45
//输出: false
//
// 进阶：
//你能不使用循环或者递归来完成本题吗？
//

/**
 * @param {number} n
 * @return {boolean}
 */


/*
  基准转换：
  时间复杂度：O(log₃ N)，假设：
  a. 基准转换基本是作为一个重复的除法实现的，复杂性类似于循环的复杂性 O(log₃ N)
  b. match方法迭代整个字符串，N 以 3 为基数表示的位数是 O(log₃ N)
  空间复杂度：O(log₃ N)，我们使用两个附加变量：
  a. 以 3 为基数表示数字的字符串（大小为O(log₃ N)）
  b. 正则表达式的字符串（常量大小）
 */

var isPowerOfThree2 = function(n) {
  return n.toString(3).match('^10*$')
};

/*
  整数限制：
  n的类型是 int，4个字节，最大值为2147483647，推出3的幂的最大值为3^19 = 2147483647。
  因为3是质数，将 3^19整除n，如果余数是0则表示是3^19的除数，即3的幂。
  时间复杂度：O(1)
  空间复杂度：O(1)
 */

var isPowerOfThree = function(n) {
  return n > 0 && 1162261467 % n == 0
};

const n = 109
console.log(isPowerOfThree(n));
