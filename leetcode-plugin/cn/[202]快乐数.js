//编写一个算法来判断一个数是不是“快乐数”。
//
// 一个“快乐数”定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是无限循环但始终变不到 1。如果可以变为 1，那么这个数就是快乐数。
//
// 示例:
//
// 输入: 19
//输出: true
//解释:
//12 + 92 = 82
//82 + 22 = 68
//62 + 82 = 100
//12 + 02 + 02 = 1
//
//

/**
 * @param {number} n
 * @return {boolean}
 */

/*
  依据计算方式，得到结果范围：
  1. 每个位置上的数字范围：0~9
  2. 对于1位数，平方和范围：1~81
  3. 对于2位数，平方和范围：1~162
  4. 对于3位数，平方和范围：1~243
  5. 整数最大位数是10位数(最大的整数2147483647)，那么平方和范围：1~810
  6. 可以看出，平方和总会回归到3位数，并进入 1~243 这个数字范围内
  既然所有整数的平方和都会落在 1~243 这个范围内，那么就说明这个循环判定结果一定是有循环次数上限的，所以它是一个常数复杂度，即O(1)
  时间复杂度：O(1)
  空间复杂度：O(1)
 */

var isHappy = function(n) {
  let sumList = new Set()
  let result = 0
  n = n + ''
  while (result !== 1) {
    result = 0
    for (let i = 0; i < n.length; i++) {
      result += n[i] * n[i]
    }
    n = result + ''
    if (sumList.has(result)) return false
    sumList.add(result)
  }
  return true
};
const n = 19
console.log(isHappy(n));
